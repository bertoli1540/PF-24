"\\end{quadro}", sep = "")
# Escreve o resultado em um arquivo
writeLines(latex)
}
library(dplyr)
library(tidyr)
library(stringr)
library(knitr)
print_quadro_resumo <- function(data, var_name, title = "Medidas resumo dos esportes", label = "quad:quadro_resumo1") {
var_name <- substitute(var_name)
# Calcular medidas de resumo
data <- data %>%
summarize(
`Média` = round(mean(!!sym(var_name)), 2),
`Desvio Padrão` = round(sd(!!sym(var_name)), 2),
`Variância` = round(var(!!sym(var_name)), 2),
`Mínimo` = round(min(!!sym(var_name)), 2),
`1º Quartil` = round(quantile(!!sym(var_name), probs = 0.25), 2),
`Mediana` = round(quantile(!!sym(var_name), probs = 0.5), 2),
`3º Quartil` = round(quantile(!!sym(var_name), probs = 0.75), 2),
`Máximo` = round(max(!!sym(var_name)), 2)
) %>%
t() %>%
as.data.frame() %>%
rownames_to_column()
latex <- str_c("\\begin{quadro}[H]\n",
"\\caption{", title, "}\n",
"\\centering\n",
"\\begin{adjustbox}{max width=\\textwidth}\n",
"\\begin{tabular}{", sep = "")
col_count <- ncol(data)
row_count <- nrow(data)
# Definindo formato da tabela
latex <- str_c(latex, "| l |\n", sep = "")
for (i in seq(2, col_count)) {
numCount <- data[i, -c(1)] %>%
as.numeric() %>%
{floor(log10(.)) + 1} %>%
max()
latex <- str_c(latex, "\t\t\tS[table-format = ", numCount, ".2]\n", sep = "")
}
latex <- str_c(latex, "\t\t\t|}\n\t\\toprule\n\t\t", sep = "")
# Cabeçalho da tabela
if (col_count > 2) {
for (i in seq(1, col_count)) {
if (i == 1)
latex <- str_c(latex, "\\textbf{Estatística}", sep = "")
else
latex <- str_c(latex, " \\textbf{", data[1, i], "}", sep = "")
if (i < col_count)
latex <- str_c(latex, "&", sep = "")
else
latex <- str_c(latex, "\\\\\n", sep = "")
}
} else {
latex <- str_c(latex, "\\textbf{Estatística} & \\textbf{Valor} \\\\\n", sep = "")
}
latex <- str_c(latex, "\t\t\\midrule\n", sep = "")
# Preenchendo a tabela com dados
starting_number <- ifelse(col_count > 2, 2, 1)
for (i in seq(starting_number, row_count)) {
latex <- str_c(latex, "\t\t", str_flatten(t(data[i, ]), collapse = " & "), " \\\\\n")
}
# Finalizando a tabela
latex <- str_c(latex, "\t\\bottomrule\n",
"\t\\end{tabular}\n",
"\t\\label{", label, "}\n",
"\t\\end{adjustbox}\n",
"\\end{quadro}", sep = "")
# Escreve o resultado em um arquivo
writeLines(latex)
}
print_quadro_resumo <- function(data, var_name, title = "Medidas resumo dos esportes", label = "quad:quadro_resumo1") {
var_name <- substitute(var_name)
# Calcular medidas de resumo
data <- data %>%
summarize(
`Média` = round(mean(!!sym(var_name)), 2),
`Desvio Padrão` = round(sd(!!sym(var_name)), 2),
`Variância` = round(var(!!sym(var_name)), 2),
`Mínimo` = round(min(!!sym(var_name)), 2),
`1º Quartil` = round(quantile(!!sym(var_name), probs = 0.25), 2),
`Mediana` = round(quantile(!!sym(var_name), probs = 0.5), 2),
`3º Quartil` = round(quantile(!!sym(var_name), probs = 0.75), 2),
`Máximo` = round(max(!!sym(var_name)), 2)
) %>%
t() %>%
as.data.frame() %>%
rownames_to_column()
latex <- str_c("\\begin{quadro}[H]\n",
"\\caption{", title, "}\n",
"\\centering\n",
"\\begin{adjustbox}{max width=\\textwidth}\n",
"\\begin{tabular}{", sep = "")
col_count <- ncol(data)
row_count <- nrow(data)
# Definindo formato da tabela
latex <- str_c(latex, "| l |\n", sep = "")
for (i in seq(2, col_count)) {
numCount <- data[i, -c(1)] %>%
as.numeric() %>%
{floor(log10(.)) + 1} %>%
max()
latex <- str_c(latex, "\t\t\tS[table-format = ", numCount, ".2]\n", sep = "")
}
latex <- str_c(latex, "\t\t\t|}\n\t\\toprule\n\t\t", sep = "")
# Cabeçalho da tabela
if (col_count > 2) {
for (i in seq(1, col_count)) {
if (i == 1)
latex <- str_c(latex, "\\textbf{Estatística}", sep = "")
else
latex <- str_c(latex, " \\textbf{", data[1, i], "}", sep = "")
if (i < col_count)
latex <- str_c(latex, "&", sep = "")
else
latex <- str_c(latex, "\\\\\n", sep = "")
}
} else {
latex <- str_c(latex, "\\textbf{Estatística} & \\textbf{Valor} \\\\\n", sep = "")
}
latex <- str_c(latex, "\t\t\\midrule\n", sep = "")
# Preenchendo a tabela com dados
starting_number <- ifelse(col_count > 2, 2, 1)
for (i in seq(starting_number, row_count)) {
latex <- str_c(latex, "\t\t", str_flatten(t(data[i, ]), collapse = " & "), " \\\\\n")
}
# Finalizando a tabela
latex <- str_c(latex, "\t\\bottomrule\n",
"\t\\end{tabular}\n",
"\t\\label{", label, "}\n",
"\t\\end{adjustbox}\n",
"\\end{quadro}", sep = "")
# Escreve o resultado em um arquivo
writeLines(latex)
}
olimpiadas$Peso <- as.numeric(olimpiadas$Peso)
olimpiadas$pesokg = olimpiadas$Peso * 0.453592
olimpiadas$alturam = olimpiadas$Altura / 100
olimpiadas$imc <- olimpiadas$pesokg / (olimpiadas$alturam^2)
judo =  subset(olimpiadas, Esporte == "Judo")
badminton =  subset(olimpiadas, Esporte == "Badminton")
futebol = subset(olimpiadas, Esporte == "Football")
ginastica = subset(olimpiadas, Esporte == "Gymnastics")
atletismo = subset(olimpiadas, Esporte == "Athletics")
espotes=rbind(judo,badminton,futebol,ginastica,atletismo)
espotes$Esporte[espotes$Esporte == "Football"] = "Futebol"
espotes$Esporte[espotes$Esporte == "Gymnastics"] = "Ginastica"
espotes$Esporte[espotes$Esporte == "Athletics"] = "Atletismo"
ggplot(espotes) +
aes(x = reorder(Esporte, imc, FUN = median), y = imc) +
geom_boxplot(aes(fill = "Mediana"), width = 0.5) +
stat_summary(
aes(shape = "Média"), fun = "mean", geom = "point", size = 3, fill = "white"
) +
labs(x = "Esporte", y = "IMC", title = "IMC POR ESPORTE") +
scale_shape_manual(values = c(23)) +
scale_fill_manual(values = c("Mediana" = "#A11D21")) +
guides(fill = "none", shape = "none") +
theme_estat()
ggsave("box_imc_esportes_sem_legenda.pdf", width = 158, height = 93, units = "mm")
View(espotes)
library(dplyr)
library(tidyr)
library(stringr)
library(knitr)
print_quadro_resumo <- function(data, var_name, title = "Medidas resumo dos esportes", label = "quad:quadro_resumo1") {
var_name <- substitute(var_name)
# Calcular medidas de resumo
data <- data %>%
summarize(
`Média` = round(mean(!!sym(var_name)), 2),
`Desvio Padrão` = round(sd(!!sym(var_name)), 2),
`Variância` = round(var(!!sym(var_name)), 2),
`Mínimo` = round(min(!!sym(var_name)), 2),
`1º Quartil` = round(quantile(!!sym(var_name), probs = 0.25), 2),
`Mediana` = round(quantile(!!sym(var_name), probs = 0.5), 2),
`3º Quartil` = round(quantile(!!sym(var_name), probs = 0.75), 2),
`Máximo` = round(max(!!sym(var_name)), 2)
) %>%
t() %>%
as.data.frame() %>%
rownames_to_column()
latex <- str_c("\\begin{quadro}[H]\n",
"\\caption{", title, "}\n",
"\\centering\n",
"\\begin{adjustbox}{max width=\\textwidth}\n",
"\\begin{tabular}{", sep = "")
col_count <- ncol(data)
row_count <- nrow(data)
# Definindo formato da tabela
latex <- str_c(latex, "| l |\n", sep = "")
for (i in seq(2, col_count)) {
numCount <- data[i, -c(1)] %>%
as.numeric() %>%
{floor(log10(.)) + 1} %>%
max()
latex <- str_c(latex, "\t\t\tS[table-format = ", numCount, ".2]\n", sep = "")
}
latex <- str_c(latex, "\t\t\t|}\n\t\\toprule\n\t\t", sep = "")
# Cabeçalho da tabela
if (col_count > 2) {
for (i in seq(1, col_count)) {
if (i == 1)
latex <- str_c(latex, "\\textbf{Estatística}", sep = "")
else
latex <- str_c(latex, " \\textbf{", data[1, i], "}", sep = "")
if (i < col_count)
latex <- str_c(latex, "&", sep = "")
else
latex <- str_c(latex, "\\\\\n", sep = "")
}
} else {
latex <- str_c(latex, "\\textbf{Estatística} & \\textbf{Valor} \\\\\n", sep = "")
}
latex <- str_c(latex, "\t\t\\midrule\n", sep = "")
# Preenchendo a tabela com dados
starting_number <- ifelse(col_count > 2, 2, 1)
for (i in seq(starting_number, row_count)) {
latex <- str_c(latex, "\t\t", str_flatten(t(data[i, ]), collapse = " & "), " \\\\\n")
}
# Finalizando a tabela
latex <- str_c(latex, "\t\\bottomrule\n",
"\t\\end{tabular}\n",
"\t\\label{", label, "}\n",
"\t\\end{adjustbox}\n",
"\\end{quadro}", sep = "")
# Escreve o resultado em um arquivo
writeLines(latex)
}
espotes %>%
group_by(Esporte) %>%
print_quadro_resumo(var_name = imc)
print_quadro_resumo <- function(data, var_name, title = "Medidas resumo da(o) [nome da variável]", label = "quad:quadro_resumo1") {
var_name <- substitute(var_name)
# Calcular medidas de resumo, ignorando valores NA
data <- data %>%
summarize(
`Média` = round(mean(!!sym(var_name), na.rm = TRUE), 2),
`Desvio Padrão` = round(sd(!!sym(var_name), na.rm = TRUE), 2),
`Variância` = round(var(!!sym(var_name), na.rm = TRUE), 2),
`Mínimo` = round(min(!!sym(var_name), na.rm = TRUE), 2),
`1º Quartil` = round(quantile(!!sym(var_name), probs = 0.25, na.rm = TRUE), 2),
`Mediana` = round(quantile(!!sym(var_name), probs = 0.5, na.rm = TRUE), 2),
`3º Quartil` = round(quantile(!!sym(var_name), probs = 0.75, na.rm = TRUE), 2),
`Máximo` = round(max(!!sym(var_name), na.rm = TRUE), 2)
) %>%
t() %>%
as.data.frame() %>%
rownames_to_column()
latex <- str_c("\\begin{quadro}[H]\n",
"\\caption{", title, "}\n",
"\\centering\n",
"\\begin{adjustbox}{max width=\\textwidth}\n",
"\\begin{tabular}{", sep = "")
col_count <- ncol(data)
row_count <- nrow(data)
latex <- str_c(latex, "| l |\n", sep = "")
for (i in seq(2, col_count)) {
numCount <- data[i, -c(1)] %>%
as.numeric() %>%
{floor(log10(.)) + 1} %>%
max()
latex <- str_c(latex, "\t\t\tS[table-format = ", numCount, ".2]\n", sep = "")
}
latex <- str_c(latex, "\t\t\t|}\n\t\\toprule\n\t\t", sep = "")
if (col_count > 2) {
for (i in seq(1, col_count)) {
if (i == 1)
latex <- str_c(latex, "\\textbf{Estatística}", sep = "")
else
latex <- str_c(latex, " \\textbf{", data[1, i], "}", sep = "")
if (i < col_count)
latex <- str_c(latex, "&", sep = "")
else
latex <- str_c(latex, "\\\\\n", sep = "")
}
} else {
latex <- str_c(latex, "\\textbf{Estatística} & \\textbf{Valor} \\\\\n", sep = "")
}
latex <- str_c(latex, "\t\t\\midrule\n", sep = "")
starting_number <- ifelse(col_count > 2, 2, 1)
for (i in seq(starting_number, row_count)) {
latex <- str_c(latex, "\t\t", str_flatten(t(data[i, ]), collapse = " & "), " \\\\\n")
}
latex <- str_c(latex, "\t\\bottomrule\n",
"\t\\end{tabular}\n",
"\t\\label{", label, "}\n",
"\t\\end{adjustbox}\n",
"\\end{quadro}", sep = "")
writeLines(latex)
}
espotes %>%
group_by(Esporte) %>%
print_quadro_resumo(var_name = imc)
\begin{quadro}[H]
\documentclass{article}
cat("\\begin{quadro}[H]
\\caption{Medidas resumo da(o) [nome da variável]}
\\centering
\\begin{adjustbox}{max width=\\textwidth}
\\begin{tabular}{| l |
S[table-format = 2.2]
S[table-format = 1.2]
S[table-format = 2.2]
S[table-format = 2.2]
S[table-format = 2.2]
|}
\\toprule
\\textbf{Estatística} & \\textbf{Atletismo} & \\textbf{Badminton} & \\textbf{Futebol} & \\textbf{Ginastica} & \\textbf{Judo} \\\\
\\midrule
Média & 22.30 & 22.21 & 22.51 & 20.68 & 25.70 \\\\
Desvio Padrão & 3.86 & 1.50 & 1.73 & 2.38 & 5.12 \\\\
Variância & 14.92 & 2.26 & 2.99 & 5.67 & 26.23 \\\\
Mínimo & 15.82 & 18.94 & 16.73 & 15.16 & 18.52 \\\\
1º Quartil & 20.03 & 21.22 & 21.34 & 18.61 & 22.06 \\\\
Mediana & 21.45 & 22.28 & 22.49 & 21.09 & 24.68 \\\\
3º Quartil & 23.67 & 23.21 & 23.71 & 22.48 & 27.70 \\\\
Máximo & 44.38 & 26.73 & 29.07 & 26.45 & 56.50 \\\\
\\bottomrule
\\end{tabular}
\\label{quad:quadro_resumo1}
\\end{adjustbox}
\\end{quadro}
")
cat("\\begin{quadro}[H]
\\caption{Medidas resumo dos esportes]}
\\centering
\\begin{tabular}{| l |
S[table-format = 2.2]
S[table-format = 1.2]
S[table-format = 2.2]
S[table-format = 2.2]
S[table-format = 2.2]
|}
\\toprule
\\textbf{Estatística} & \\textbf{Atletismo} & \\textbf{Badminton} & \\textbf{Futebol} & \\textbf{Ginastica} & \\textbf{Judo} \\\\
\\midrule
Média & 22.30 & 22.21 & 22.51 & 20.68 & 25.70 \\\\
Desvio Padrão & 3.86 & 1.50 & 1.73 & 2.38 & 5.12 \\\\
Variância & 14.92 & 2.26 & 2.99 & 5.67 & 26.23 \\\\
Mínimo & 15.82 & 18.94 & 16.73 & 15.16 & 18.52 \\\\
1º Quartil & 20.03 & 21.22 & 21.34 & 18.61 & 22.06 \\\\
Mediana & 21.45 & 22.28 & 22.49 & 21.09 & 24.68 \\\\
3º Quartil & 23.67 & 23.21 & 23.71 & 22.48 & 27.70 \\\\
Máximo & 44.38 & 26.73 & 29.07 & 26.45 & 56.50 \\\\
\\bottomrule
\\end{tabular}
\\label{quad:quadro_resumo1}
\\end{quadro}
")
ggplot(olimpiadas, aes(x = pesokg, y = Altura)) +
geom_point(color = "#A11D21") +
labs(
title = "Altura x Peso",
x = "Peso",
y = "Altura",
color = "Legenda"
) +
theme_estat()
library(kableExtra)
library(DT)
library(knitr)
library(pacman)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(readxl)
library(plotly)
athenas = read_excel("OlimpiadasPS.xlsx",
sheet = "Athina")
rj = read_excel("OlimpiadasPS.xlsx",
sheet = "Rio de Janeiro")
londres = read_excel("OlimpiadasPS.xlsx",
sheet = "London")
sydney = read_excel("OlimpiadasPS.xlsx",
sheet = "Sydney")
pequim = read_excel("OlimpiadasPS.xlsx",
sheet = "Beijing")
# Organizando o banco de dados
colnames(sydney) = c("Nome", "Sexo", "Idade", "Altura", "Peso", "Pais", "Esporte", "Evento", "Medalha")
colnames(rj) = c("Nome", "Sexo", "Idade", "Altura", "Peso", "Pais", "Esporte", "Evento", "Medalha")
colnames(londres) = c("Nome", "Sexo", "Idade", "Altura", "Peso", "Pais", "Esporte", "Evento", "Medalha")
colnames(pequim) = c("Nome", "Sexo", "Idade", "Altura", "Peso", "Pais", "Esporte", "Evento", "Medalha")
colnames(athenas) = c("Nome", "Sexo", "Idade", "Altura", "Peso", "Pais", "Esporte", "Evento", "Medalha")
primeiro =  rbind(athenas,rj,londres,sydney,pequim)
olimpiadasG = subset(primeiro, Medalha== "Gold")
olimpiadasS = subset(primeiro, Medalha== "Silver")
olimpiadasB = subset(primeiro, Medalha== "Bronze")
olimpiadas =  rbind(olimpiadasG,olimpiadasS,olimpiadasB)
estat_colors <- c(
"#A11D21", "#003366", "#CC9900",
"#663333", "#FF6600", "#CC9966",
"#999966", "#006606", "#008091",
"#041835", "#666666" )
theme_estat <- function(...) {
theme <- ggplot2::theme_bw() +
ggplot2::theme(
axis.title.y = ggplot2::element_text(colour = "black", size = 12),
axis.title.x = ggplot2::element_text(colour = "black", size = 12),
axis.text = ggplot2::element_text(colour = "black", size = 9.5)
,
panel.border = ggplot2::element_blank(),
axis.line = ggplot2::element_line(colour = "black"),
legend.position = "top",
...
)
return(
list(
theme,
scale_fill_manual(values = estat_colors),
scale_colour_manual(values = estat_colors)
)
)
}
medalW = subset(olimpiadas, Sexo== "F")
medalW$Pais[medalW$Pais == "United States"] = "Estados Unidos"
medalW$Pais[medalW$Pais == "Germany"] = "Alemanha"
tabelamedalhasgeral= table(medalW$Pais)
top5medalhas = sort(tabelamedalhasgeral, decreasing = TRUE)
top5= data.frame(Team = names(head(top5medalhas, 5)),
Medalhas = as.numeric(head(top5medalhas, 5)))
ggplot(top5, aes(x = reorder(Team, -Medalhas), y = Medalhas)) +
geom_bar(stat = "identity", fill = "#A11D21") +
geom_text(aes(label = paste0(Medalhas, " (", round(Medalhas / sum(Medalhas) * 100, 1), "%)")),
vjust = -0.5, size = 2.5) +
labs(title = "Top 5 países com mais medalhas entre as mulheres",
x = "Países", y = "Número de Medalhas") +
theme_estat()
head( top5medalhas, 5)
olimpiadas$Peso <- as.numeric(olimpiadas$Peso)
olimpiadas$pesokg = olimpiadas$Peso * 0.453592
olimpiadas$alturam = olimpiadas$Altura / 100
olimpiadas$imc <- olimpiadas$pesokg / (olimpiadas$alturam^2)
judo =  subset(olimpiadas, Esporte == "Judo")
badminton =  subset(olimpiadas, Esporte == "Badminton")
futebol = subset(olimpiadas, Esporte == "Football")
ginastica = subset(olimpiadas, Esporte == "Gymnastics")
atletismo = subset(olimpiadas, Esporte == "Athletics")
espotes=rbind(judo,badminton,futebol,ginastica,atletismo)
espotes$Esporte[espotes$Esporte == "Football"] = "Futebol"
espotes$Esporte[espotes$Esporte == "Gymnastics"] = "Ginastica"
espotes$Esporte[espotes$Esporte == "Athletics"] = "Atletismo"
ggplot(espotes) +
aes(x = reorder(Esporte, imc, FUN = median), y = imc) +
geom_boxplot(aes(fill = "Mediana"), width = 0.5) +
stat_summary(
aes(shape = "Média"), fun = "mean", geom = "point", size = 3, fill = "white"
) +
labs(x = "Esporte", y = "IMC", title = "IMC POR ESPORTE") +
scale_shape_manual(values = c(23)) +
scale_fill_manual(values = c("Mediana" = "#A11D21")) +
guides(fill = "none", shape = "none") +
theme_estat()
olimpiadas$Medalha[olimpiadas$Medalha == "Gold"] = "Ouro"
olimpiadas$Medalha[olimpiadas$Medalha == "Silver"] = "Prata"
ouro = subset(olimpiadas, Medalha == "Ouro")
prata = subset(olimpiadas, Medalha == "Prata")
bronze = subset(olimpiadas, Medalha == "Bronze")
medalhaalltime = rbind(ouro,prata,bronze)
michaelphelps = subset(medalhaalltime,Nome == "Michael Fred Phelps, II")
natalie =  subset(medalhaalltime, Nome == "Natalie Anne Coughlin (-Hall)")
ryan = subset(medalhaalltime,Nome == "Ryan Steven Lochte")
top3= rbind(michaelphelps, natalie,  ryan)
library(dplyr)
library(ggplot2)
library(forcats)
library(stringr)
# Adaptando o código para o novo banco de dados e variáveis
trans_drv <- top3 %>%
mutate(Nome = case_when(
str_detect(Nome, "auto") ~ "auto",
str_detect(Nome, "manual") ~ "manual",
TRUE ~ Nome  # Mantém o nome original se não for "auto" ou "manual"
)) %>%
group_by(Nome, Medalha) %>%
summarise(freq = n(), .groups = "drop") %>%
mutate(
freq_relativa = round(freq / sum(freq) * 100, 1)
)
# Calcula as legendas com frequência e porcentagem
porcentagens <- str_c(trans_drv$freq_relativa, "%") %>% str_replace("\\.", ",")
legendas <- str_squish(str_c(trans_drv$freq, " (", porcentagens, ")"))
# Criação do gráfico
ggplot(trans_drv) +
aes(
x = fct_reorder(Nome, freq, .desc = TRUE),
y = freq,
fill = Medalha,
label = legendas
) +
geom_col(position = position_dodge2(preserve = "single", padding = 0)) +
geom_text(
position = position_dodge(width = 0.9),
vjust = -0.5, hjust = 0.5,
size = 3
) +
labs(x = "Nome do Atleta", y = "Quantidade de Medalhas") +
theme_estat() +  # Ou use `theme_estat()` se for um tema personalizado
ggtitle("Quantidade de Medalhas por Atleta e Tipo de Medalha")
# Salvando o gráfico em PDF
ggsave("colunas-bi-freq.pdf", width = 158, height = 93, units = "mm")
ggplot(olimpiadas, aes(x = pesokg, y = Altura)) +
geom_point(color = "#A11D21") +
labs(
title = "Altura x Peso",
x = "Peso",
y = "Altura",
color = "Legenda"
) +
theme_estat()
correlacao <- cor(olimpiadas$pesokg, olimpiadas$Altura, use = "complete.obs")
